<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>GUI Reference - MessageLoop Mode</title>
  <META http-equiv=Content-Type content="text/html; charset=shift-jis">
  <link href="../css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>GUI Reference - MessageLoop Mode </h1>
<p>
MessageLoopモードではスクリプトはほとんどの時間をループで使います。このループでは<a href="../functions/GUIGetMsg.htm">GUIGetMsg</a>関数を使って単純にGUIのポーリングがおこなわれます。イベントが起きるとGUIGetMsg関数の返し値がその詳細(ボタンが押された、GUIが閉じられたなど)を教えてくれます。 
</p>
<p>
MessageLoopはAutoIt GUIのデフォルトのメッセージモードです。他のモードには<a href="GUIRef_OnEventMode.htm">OnEvent</a>モードがあります。
</p>
<p><strong>MessageLoopモードではGUIGetMsg関数を使ってポーリングすることでイベントを受け取ります。従って1秒間に何度もGUIGetMsg関数を呼ばなければなりません。さもなければGUIは反応してくれません。 
</strong></p>
<p>&nbsp;</p>
<h2>MessageLoopフォーマットの基本</h2>
<p>一般的なMessageLoopコードの書き方は次の通りです。</p>
<p class="codebox">While 1<br>
&nbsp;&nbsp;$msg = GUIGetMsg()<br>
&nbsp; ...<br>&nbsp; ...
<br>
WEnd</p>
<p>&nbsp;</p>
<p>
通常上記のようなループはCPU使用率を100%にしてしまいますが、幸い<a href="../functions/GUIGetMsg.htm">GUIGetMsg</a>関数はイベントが起きていないときには自動的にCPUをアイドリング状態にしてくれます。GUIが反応しなくなってしまうだけですからループ内でCPUの酷使を避けるための手書きのSleepを<strong>おこなわないでください</strong> 。
</p>
<p>&nbsp;</p>
<h2>GUIイベント</h2>
<p>
<a href="../functions/GUIGetMsg.htm">GUIGetMsg</a>の返すイベントメッセージは3タイプあります。
</p>
<p>
<li>イベント無し</li>
<li>コントロールイベント</li>
<li>システムイベント</li>
<p>&nbsp;</p>
<p><strong>イベント無し</strong></p>
<p>
イベントがない場合、GUIGetMsgは<strong>0</strong>を返します。GUIでは<em>この場合がほとんどです</em>。
</p>
<p>&nbsp;</p>
<p><strong>コントロールイベント</strong></p>
<p>
コントロールがクリックされたりコントロールに変化があった場合、コントロールイベントが返されます。
これは<strong>正の数</strong>で、<a href="GUICtrlCreate.htm">GUICtrlCreate...</a>でコントロールを作成した時に返される<strong>コントロールID</strong>と対応しています。
</p>
<p>&nbsp;</p>
<p><strong>システムイベント</strong></p>
<p>
システムイベントはGUIが閉じたときなどに返され、<strong>負の数</strong>です。具体的なイベントは下に示す通りで<strong>GUIConstantsEx.au3</strong>内で定義されています。
</p>
<p class="code">$GUI_EVENT_CLOSE<br>
  $GUI_EVENT_MINIMIZE<br>
  $GUI_EVENT_RESTORE<br>
  $GUI_EVENT_MAXIMIZE<br>
  $GUI_EVENT_PRIMARYDOWN<br>
  $GUI_EVENT_PRIMARYUP<br>
  $GUI_EVENT_SECONDARYDOWN<br>
  $GUI_EVENT_SECONDARYUP<br>
$GUI_EVENT_MOUSEMOVE<br>
$GUI_EVENT_RESIZED<br>
$GUI_EVENT_DROPPED</p>
<p>&nbsp;</p>
<h2>GUIの例</h2>
<p>
メインの<a href="GUIRef.htm">GUIリファレンスページ</a>で、次のような簡単なハローワールドの例を作りました。
</p>
<p class="codebox">#include &lt;GUIConstantsEx.au3&gt;<br>
    <br>
  GUICreate(&quot;Hello World&quot;, 200, 100) <br>
  GUICtrlCreateLabel("Hello world! How are you?", 30, 10)<br>
  GUICtrlCreateButton("OK", 70, 50, 60)<br>
  GUISetState(@SW_SHOW)<br>
  Sleep(2000)</p>
<p>&nbsp;</p>
<p>
さて、メッセージループと上で述べたイベントメッセージを使ってコードを完成させましょう。読みやすいようにSelect文を使ってメッセージの数値を処理するのが一般的です。
</p>
<p>&nbsp;</p>
<p class="codebox">
#include &lt;GUIConstantsEx.au3&gt;<br>
<br>
GUICreate("Hello World", 200, 100)<br>
GUICtrlCreateLabel("Hello world!  How are you?", 30, 10)<br>
$okbutton = GUICtrlCreateButton("OK", 70, 50, 60)<br>
GUISetState(@SW_SHOW)<br>
<br>
While 1<br>
  &nbsp;&nbsp;$msg = GUIGetMsg()<br>
  <br>
&nbsp;&nbsp;Select<br>
 &nbsp;&nbsp;&nbsp; Case $msg = $okbutton<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       MsgBox(0, &quot;GUI Event&quot;, &quot;You pressed OK!&quot;)<br>
<br>
 &nbsp;&nbsp;&nbsp; Case $msg = $GUI_EVENT_CLOSE<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
MsgBox(0, &quot;GUI Event&quot;, &quot;You clicked CLOSE! Exiting...&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ExitLoop<br>
&nbsp; EndSelect<br>
WEnd
</p>
<p>
とても単純です。たくさんのウィンドウとコントロールがある場合はより複雑になります。しかしその場合も上に示したものが基本です。
</p>
<p>&nbsp;</p>
<h2>GUIGetMsgの応用と複数ウィンドウ </h2>
<p>
コントロールIDは固有の値で、もし複数のウィンドウがある場合でも上記のコードはコントロール、ウィンドウ複数を正常に処理します。&nbsp;ただし、$GUI_EVENT_CLOSEや$GUI_MOUSEMOVEといったイベントを処理する場合はどのGUIウィンドウがイベントを発生させたのかを知る必要があります。&nbsp;そのためにはGUIGetMsgを次のように呼ばなければなりません。
</p>
<p class="codebox">$msg = GUIGetMsg(1)</p>
<p>&nbsp;</p>
<p>
<strong>1 </strong>をパラメータにして呼ぶと、単体のイベント値の代わりに<strong>配列</strong>が返されます。配列にはイベント($array[0]内)とウィンドウハンドルといった追加情報($array[1]内)が格納されています。 &nbsp;もし2つのウィンドウが作成された場合、先ほどの例は次のように書き直されます。
</p>
<p class="codebox"> #include &lt;GUIConstantsEx.au3&gt;<br>
    <br>
  $mainwindow = GUICreate("Hello World", 200, 100)<br>
  GUICtrlCreateLabel("Hello world! How are you?", 30, 10)<br>
  $okbutton = GUICtrlCreateButton("OK", 70, 50, 60)<br>
  <br>
  $dummywindow = GUICreate("Dummy window for testing ", 200, 100)<br>
  <br>
  GUISwitch($mainwindow)<br>
  GUISetState(@SW_SHOW)<br>
  <br>
  While 1<br>
&nbsp;&nbsp;$msg = GUIGetMsg(1)<br>
  <br>
&nbsp;&nbsp;Select<br>
&nbsp;&nbsp;&nbsp; Case $msg[0] = $okbutton<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox(0, &quot;GUI Event&quot;, &quot;You pressed OK!&quot;)<br>
  <br>
&nbsp;&nbsp;&nbsp; Case $msg[0] = $GUI_EVENT_CLOSE And $msg[1] = $mainwindow <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MsgBox(0, &quot;GUI Event&quot;, &quot;You clicked CLOSE on the main window! Exiting...&quot;)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ExitLoop<br>
&nbsp; EndSelect<br>
  WEnd </p>
<p>&nbsp;</p>
<p>
最初の大きな違いは<a href="../functions/GUISwitch.htm">GUISwitch</a>関数が呼ばれていることです。新しいウィンドウが作られるとそれが次回以降のGUI操作の「デフォルト」ウィンドウになります(コントロール作成もそうです)。&nbsp;今回の場合、動かしたいのはメインの「Hello World」ウィンドウで、テストウィンドウではないので「switch」をおこないます。&nbsp;いくつかのGUI関数では関数呼び出しにウィンドウハンドルが使えます。これらの関数は自動で切り替えをおこなってくれます。&nbsp;
先ほどの例に使うと次のようになります。
</p>
<p class="codebox">GUISetState(@SW_SHOW, $mainwindow)</p>
<p>&nbsp;</p>
<p>
つぎの違いはGUIGetMsgの呼ばれ方とイベントのチェックの仕方です。$msg[0] と$msg[1] を見てください。クローズイベントが返され、<strong>かつ</strong>そのイベントがメインウィンドウからの場合のみスクリプトを終了します。
</p>
<p>&nbsp;</p>
</body>
</html>